cd SOftware/Tools:
1. oracle VM Virtual Box
2. vagrant.la
3. cmder: just like cmd to run linux commands

VIM insert:escape
WQ - save
Q-quit

Vagrant/CMDER commands:
open cmder
vagrant.exe init - for creating Virtual machines.
ls - listing - list of files in the folder
mkdir - create folder
create file here - text file.
mv Vagrantfile.txt Vagrantfile - converts txt file into vagrant format.
cat *vagrantfile*  - open the file
vagrant.exe up - FINAL command to create VMs
vagrant.exe status - to know the status
vagrant.exe halt *VM Name* - stop machines
vagrant.exe destroy *machineName* - destroy machines
Vagrant.exe help
Vagrant.exe box list
Vagrant.exe ssh *hostname - acs* - go to VM
passwd to set the password - preffer redhat
sudo su - - go back to root

ip addr - shows interfaces - first is loopback, second is NAT IP, third is HOST ONLY IP
ping google.com - control c to stop pinging
yum install epel-release -y - enterprise release
yum install git -y - GIT install
git - press tab twice
which git
rpm -qa | grep -i git - to know git running



git config --global --list

mkdir git-demo
ls
cd git-demo/
ls
git init - initiate git
git config --global --list - empty for now
git config --global user.name "Chiranshu Gupta" - set username
ls -a - to check if git is there in the folder
git config --global user.email "Chiranshu.Gupta@birlasoft.com"  - email id for every time you deploy anything
ls
git config --global --list - to confirm username and email  -shows config file
ls
echo "hello world" > readme.txt
ls -ltr
git status - file created but not tracker
git add readme.txt - add it to GIT
git status - showing tracked
git commit -m "Initial Commit" - commiting the file adding the message with m
git log - get the log of the file.
echo "hello again" > readme.txt - now lets try to edit the file - single *>* means overwrite, double for append
git commit -am "Second Commit" - addition and commit

DAY#2:
SIDEBAR
cd .git/objects/ - gets into object folder under git-demo
ls ltre - shows the list of files in object folder
**

git diff *first 6 hexa alpha of first commit*..*first 6 hexa alpha of first commit*- to know diff between two diff commits
OR
git diff head~1 - diff between current and its older version
git diff HEAD~1 ..HEAD~2 - diff between -1 and its older version


echo "first file" > readme.txt
echo "second file" > test-2.txt
git add test-2.txt

git add -u readme.txt - -u is update
git commit -m "first file msg"
git add -u test-2.txt
git commit -m "second file msg" - separately do commit so that you can roll back separately.


cp -rf test-2.txt test-3.txt - create test-3 and copy data of test-2 to test-3.
echo "abc" >> test-2.txt
sdiff test-2 test-3 - diff between two

git rm test-3.txt - remove/delete file
git mv test-2.txt test-1.txt - move test 2 to test-1. basically deleting test-2 and adding test-1 => rename


GITHUB
git clone https://github.com/chiranshugupta/test1.git








































